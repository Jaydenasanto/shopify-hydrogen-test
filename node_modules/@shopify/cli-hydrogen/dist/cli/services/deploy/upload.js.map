{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/upload.ts"],"names":[],"mappings":"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","sourcesContent":["import {ReqDeployConfig, UploadDeploymentResponse} from './types.js'\nimport {\n  CreateDeploymentResponse,\n  CreateDeploymentQuerySchema,\n  CreateDeploymentQuery,\n} from './graphql/create_deployment.js'\nimport {UploadDeploymentQuery} from './graphql/upload_deployment.js'\nimport {WebPageNotAvailable} from './error.js'\nimport {api, http, file} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\n\nexport const createDeployment = async (config: ReqDeployConfig): Promise<CreateDeploymentResponse> => {\n  const headers = await api.buildHeaders(config.deploymentToken)\n  const client = await http.graphqlClient({\n    headers,\n    url: getOxygenAddress(config.oxygenAddress),\n  })\n\n  const variables = {\n    input: {\n      branch: config.commitRef,\n      commitHash: config.commitSha,\n      commitAuthor: config.commitAuthor,\n      commitMessage: config.commitMessage,\n      commitTimestamp: config.timestamp,\n    },\n  }\n\n  const response: CreateDeploymentQuerySchema = await client.request(CreateDeploymentQuery, variables)\n  return response.createDeployment\n}\n\nexport const uploadDeployment = async (config: ReqDeployConfig, deploymentID: string): Promise<string> => {\n  let headers = await api.buildHeaders(config.deploymentToken)\n\n  const distPath = `${config.path}/dist`\n  const distZipPath = `${distPath}/dist.zip`\n  await zip(distPath, distZipPath)\n\n  const formData = http.formData()\n  formData.append('operations', buildOperationsString(deploymentID))\n  formData.append('map', JSON.stringify({'0': ['variables.file']}))\n  formData.append('0', file.createReadStream(distZipPath), {filename: 'upload_dist'})\n\n  delete headers['Content-Type']\n  headers = {\n    ...headers,\n    ...formData.getHeaders(),\n  }\n\n  const response = await http.shopifyFetch(getOxygenAddress(config.oxygenAddress), {\n    method: 'POST',\n    body: formData,\n    headers,\n  })\n\n  const responseData = (await response.json()) as UploadDeploymentResponse\n  return responseData.data.uploadDeployment.deployment.previewURL\n}\n\nexport const healthCheck = async (pingUrl: string) => {\n  const url = `${pingUrl}/__health`\n  const result = await http.fetch(url, {method: 'GET'})\n  if (result.status !== 200) throw WebPageNotAvailable()\n}\n\nconst buildOperationsString = (deploymentID: string): string => {\n  return JSON.stringify({\n    query: UploadDeploymentQuery,\n    variables: {deploymentID, file: null},\n  })\n}\n\nconst getOxygenAddress = (oxygenFqdn: string): string => {\n  return `https://${oxygenFqdn}/api/graphql/deploy/v1`\n}\n"]}